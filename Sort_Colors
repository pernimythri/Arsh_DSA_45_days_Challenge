*** Use bubble sort,inserion sort,quick sort,selection sort.
-> This is Bubble sort.

class Solution {
    public int[] sortColors(int[] nums) {
        int temp=0;
        for(int i=0;i<nums.length;i++)
        {
            for(int j=i+1;j<nums.length;j++)
            {
                if(nums[i]>nums[j])
                {
                    temp=nums[i];
                    nums[i]=nums[j];
                    nums[j]=temp;
                }

            }

        }
        return nums;
        
    }
}

-----------------------------------------------------------------------------------------------------
**** Only works in leetcode sort_colorsv because there is only 0,1,2

import java.util.*;

class Solution {
    public void sortColors(int[] nums) {
        int low = 0, mid = 0, high = nums.length - 1;
        
        while (mid <= high) {
            if (nums[mid] == 0) {
                // Swap nums[low] and nums[mid]
                int temp = nums[low];
                nums[low] = nums[mid];
                nums[mid] = temp;
                low++;
                mid++;
            } else if (nums[mid] == 1) {
                mid++;
            } else {
                // Swap nums[mid] and nums[high]
                int temp = nums[mid];
                nums[mid] = nums[high];
                nums[high] = temp;
                high--;
            }
        }
    }

    public static void main(String[] args) {
        Solution obj= new Solution();
        Scanner sc=new Scanner(System.in);
        System.out.println("Enter array size");
        int n=sc.nextInt();
        System.out.println("Enter values to array");
        int[] nums=new int[n];
        for(int i=0;i<n;i++)
        nums[i]=sc.nextInt();
        System.out.println("Before sorting: " + Arrays.toString(nums));
        obj.sortColors(nums);
        System.out.println("After sorting: " + Arrays.toString(nums));
    }
}
