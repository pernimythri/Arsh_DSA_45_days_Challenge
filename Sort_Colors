*** Use bubble sort,inserion sort,quick sort,selection sort.
---------------------------------------------------------------------------------------------------------
-> This is Bubble sort.

class Solution {
    public int[] sortColors(int[] nums) {
        int temp=0;
        for(int i=0;i<nums.length;i++)
        {
            for(int j=i+1;j<nums.length;j++)
            {
                if(nums[i]>nums[j])
                {
                    temp=nums[i];
                    nums[i]=nums[j];
                    nums[j]=temp;
                }

            }

        }
        return nums;
        
    }
}
-------------------------------------------------------------------------------------------------------
-> This is Insertion Sort.

import java.io.*;
import java.util.*;

public class Solution {

    int[] insertionSort(int[] arr, int n) {
        for (int i = 1; i < arr.length; i++) {
            int value = arr[i];
            int j = i - 1;
            while (j >= 0 && arr[j] > value) {
                arr[j + 1] = arr[j];
                j--;
            }
            arr[j + 1] = value;
        }
        return arr;
    }

    public static void main(String[] args) {
        Solution obj = new Solution();
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter size of array : ");
        int n = sc.nextInt();
        System.out.println("Enter elements to array : ");
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextInt();
        }
        int[] result = obj.insertionSort(arr, n);
        System.out.println("Sorted Array  : " + Arrays.toString(result));
    }
}
---------------------------------------------------------------------------------------------------------
-> This is Selection sort.

import java.util.Arrays;
import java.util.Scanner;

public class Solution {

    int[] selectionSort(int[] A, int n) {
        for (int i = 0; i < n - 1; i++) {

            // Assume the minimum is the first element
            int minIndex = i;

            
            for (int j = i + 1; j < n; j++) {
                // If this element is less, then it is the new minimum
                if (A[j] < A[minIndex]) {

                    // Found new minimum; remember its index
                    minIndex = j;
                }
            }
            // Swap the found minimum element with the first element
            int temp = A[minIndex];
            A[minIndex] = A[i];
            A[i] = temp;
        }
        return A;
    }

    public static void main(String[] args) {
        Solution obj = new Solution();
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter size of array : ");
        int n = sc.nextInt();
        System.out.println("Enter elements into array : ");
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextInt();
        }
        int[] result = obj.selectionSort(arr, n);
        System.out.println("Sorted array : " + Arrays.toString(result));
    }
}
-----------------------------------------------------------------------------------------------------
**** Only works in leetcode sort_colorsv because there is only 0,1,2

import java.util.*;

class Solution {
    public void sortColors(int[] nums) {
        int low = 0, mid = 0, high = nums.length - 1;
        
        while (mid <= high) {
            if (nums[mid] == 0) {
                // Swap nums[low] and nums[mid]
                int temp = nums[low];
                nums[low] = nums[mid];
                nums[mid] = temp;
                low++;
                mid++;
            } else if (nums[mid] == 1) {
                mid++;
            } else {
                // Swap nums[mid] and nums[high]
                int temp = nums[mid];
                nums[mid] = nums[high];
                nums[high] = temp;
                high--;
            }
        }
    }

    public static void main(String[] args) {
        Solution obj= new Solution();
        Scanner sc=new Scanner(System.in);
        System.out.println("Enter array size");
        int n=sc.nextInt();
        System.out.println("Enter values to array");
        int[] nums=new int[n];
        for(int i=0;i<n;i++)
        nums[i]=sc.nextInt();
        System.out.println("Before sorting: " + Arrays.toString(nums));
        obj.sortColors(nums);
        System.out.println("After sorting: " + Arrays.toString(nums));
    }
}
